##### PREP OUTPUT #############################################################
###############################################################################
# Output the null character
d 0200 6046
###############################################################################

##### PROMPT OUTPUT LOOP ######################################################
###############################################################################
# Clear the accumulator
d 0201 7200

# Load next character indirectly
# Add; indirect, current page; page offset 1; page offset 2
# 001 110 001 000
d 0202 1777

# Skip the following jump if output complete
d 0203 6041
# Loop while output not ready
d 0204 5203
# Output the character
d 0205 6046

# Increment the character pointer
d 0206 2377

# Increment the "negative length," and skip looping when it reaches 0
d 0207 2376

# Jump back to the beginning of the output loop
d 0210 5201
###############################################################################

##### INPUT TWO CHARACTERS ####################################################
###############################################################################
# Skip the following jump if input ready
d 0211 6031
# Loop while input not ready
d 0212 5211
# Read the character into the accumulator
d 0213 6036

# Subtract '0' (add the two's complement of '0')
d 0214 1375

# Transfer to the MQ register
d 0215 7421

# Multiply the MQ by 10
d 0216 7405
# The second operand (10) is in the next memory location
d 0217 0012

# Move the MQ back to the AC (technically OR, but AC contains 0 from multiply)
d 0220 7501

# Store the accumulator (tens place) back to memory
d 0221 3300

# Skip the following jump if input ready
d 0222 6031
# Loop while input not ready
d 0223 5222
# Read the character into the accumulator
d 0224 6036

# Subtract '0' (add the two's complement of '0')
d 0225 1375

# Add the ten's place
d 0226 1300

###############################################################################

##### LOOP TO PERFORM SUM #####################################################
###############################################################################
# If the current number to add is 0, skip the "jump to loop body"
d 0227 7440
# Jump to loop body - not the most efficient approach, but makes code simpler
d 0230 5232
# Jump to end of loop
d 0231 5250

# Store the value to add back to memory
d 0232 3300
# And immediately load it again
d 0233 1300

# Add the currently accumulated value
d 0234 1301
# And immediately store it back
d 0235 3301

# Load the value to add back
d 0237 1300
# Subtract 1
d 0240 1373

# Jump back to the loop test
d 0241 5227

###############################################################################

##### OUTPUT RESULT ###########################################################
###############################################################################
# Clear the accumulator
d 0250 7200
# Load the sum
d 0251 1301

# Begin the loop - transfer to the MQ register
d 0252 7421

# Divide by the following location in memory to isolate the highest digit
d 0253 7407
# 1000 in octal
d 0254 1750

# Store the remainder back to memory for the next iteration
d 0255 3300

# Move the MQ back to the AC (technically OR, but AC contains 0 from the store)
d 0256 7501

# Add '0' to the actual numeric value to create a character
d 0257 1374

# Skip the following jump if output complete
d 0260 6041
# Loop while output not ready
d 0261 5260
# Output the character
d 0262 6046

# Clear the accumulator
d 0263 7200
# And load current divisor
d 0264 1254
# Transfer to the MQ register
d 0265 7421
# Divide by 10
d 0266 7407
# 10 in octal
d 0267 0012

# Move the MQ back to the AC (OR technically, but accumulator must be 0)
d 0270 7501
# Continue the loop - store the divisor back to its location
d 0271 3254
# Load the remainder back into the accumulator
d 0272 1300
# Increment the 4096 minus 4 and skip the jump back to beginning of loop if 0
d 0273 2372
# Jump back to beginning of output loop
d 0274 5252
# Halt
d 0275 7402

###############################################################################


##### PROGRAM DATA ############################################################
###############################################################################
# Location 0300 is reserved for temporary values
# Location 0301 is reserved for the sum itself

# 4096 minus 4
d 0372 7773

# -1
d 0373 7777

# '0' and two's complement of '0' = 176 = 128 + 32 + 16
# 000 010 110 000
# 111 101 010 000
d 0374 0260
d 0375 7520

# 4096 minus length of the string
d 0376 7760
# Pointer to the 'E' below
d 0377 0400

# 'E'
d 0400 0105
# 'N'
d 0401 0116
# 'T'
d 0402 0124
# 'E'
d 0403 0105
# 'R'
d 0404 0122
# ' '
d 0405 0040
# '2'
d 0406 0062
# ' '
d 0407 0040
# 'D'
d 0410 0104
# 'I'
d 0411 0111
# 'G'
d 0412 0107
# 'I'
d 0413 0111
# 'T'
d 0414 0124
# 'S'
d 0415 0123
# '\r'
d 0416 0015
# '\n'
d 0417 0012
###############################################################################

# Start the program
run 0200

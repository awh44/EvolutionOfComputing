# Output the null character
d 0200 6046

# Clear the accumulator
d 0201 7200

# Load 'E' indirectly
# Add; indirect, current page; page offset 1; page offset 2
# 001 110 001 000
d 0202 1677

# Skip the following jump if output complete
d 0203 6041
# Loop while output not ready
d 0204 5203

# Output the character
d 0205 6046

# Increment the character pointer
d 0206 2277

# Increment the "length" memory location, and skip the loop jump if done
d 0207 2276

# Jump back to the beginning of the output loop
d 0210 5201

# Infinite loop
d 0214 5214

# 4096 minus length of the string
d 0276 7760
# Pointer to the 'E' below
d 0277 0300

# 'E'
d 0300 0105
# 'N'
d 0301 0116
# 'T'
d 0302 0124
# 'E'
d 0303 0105
# 'R'
d 0304 0122
# ' '
d 0305 0040
# '2'
d 0306 0062
# ' '
d 0307 0040
# 'D'
d 0310 0104
# 'I'
d 0311 0111
# 'G'
d 0312 0107
# 'I'
d 0313 0111
# 'T'
d 0314 0124
# 'S'
d 0315 0123
# '\r'
d 0316 015
# '\n'
d 0317 012

run 0200



# ASCII B / 2
#d 0200 0041

# Clear the accumulator
#d 0201 7000
# Output the null character
#d 0202 6044

# Skip the following jump if input ready
#d 0203 6031
# Loop while input not ready
#d 0204 5203
# Read the character into the accumulator
#d 0205 6036

# Skip the following jump if output complete
#d 0206 6041
# Loop while output not ready
#d 0207 5206

# Load B / 2
#d 0210 1200
# Shift B / 2 left to create B
#d 0211 7004

# Output the character
#d 0212 6044

# Infinite loop
#d 0213 5213


# Clear the accumulator
#d 0201 7000
# Output the null character
#d 0202 6044
# Skip the following jump if output complete
#d 0203 6041
# Jump back if output not complete
#d 0204 5203
# Add A to the accumulator
#d 0205 1200
# Output the A
#d 0206 6044
#d 0207 5207






# CLA - clear accumulator
#d 0200 7000
# Output the now null character
#d 0201 6046
#d 0200 6046

# Increment the accumulator
#d 0201 7001
# Initialize the output
#d 0202 6044
# Skip the following jump if output complete
#d 0203 6041
# Loop until output complete
#d 0204 5203
# Go back and increment
#d 0205 5201
